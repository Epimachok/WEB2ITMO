<?xml version="1.0" encoding="UTF-8"?>

<project name="lab3" default="build">

    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="*" />
            <include name="jsch.jar"/>
        </fileset>
    </path>


    <path id="classpath.test">
        <pathelement path="lib/junit-4.12.jar"/>
        <pathelement path="lib/jakarta.servlet-api-6.0.0.jar"/>
        <pathelement path="lib/apiguardian-api-1.1.2.jar"/>
        <pathelement path="lib/hamcrest-core-1.3.jar"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="compile" depends="clean">
        <echo message="***** COMPILE STARTED *****"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false" encoding="UTF-8"/>
        <echo message="***** COMPILE COMPLETED *****"/>
    </target>

    <target name="build" depends="compile">
        <echo message="***** BUILD STARTED *****"/>
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Epimachok"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="Main in wildfly"/>
            </manifest>
        </war>
        <echo message="***** BUILD COMPLETED *****"/>
    </target>

    <target name="clean">
        <echo message="***** CLEAN STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="***** CLEAN COMPLETED *****"/>
    </target>

    <target name="test" depends="build">
        <echo message="***** TEST STARTED *****"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="on" haltonfailure="true" haltonerror="true">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="***** TEST COMPLETED *****"/>
    </target>

    <target name="native2ascii" depends="compile">
        <echo message="***** NATIVE2ASCII CONVERSION STARTED *****"/>
        <mkdir dir="${build.dir}/locales"/>

        <native2ascii src="src/main/resources/" dest="${build.dir}/locales/" encoding="UTF-8"/>

        <echo message="***** NATIVE2ASCII CONVERSION COMPLETED *****"/>
    </target>


    <target name="generate-checksums">
        <delete file="${checksums.md5.file}" quiet="true"/>
        <delete file="${checksums.sha1.file}" quiet="true"/>

        <checksum algorithm="MD5" fileext=".md5">
            <fileset dir="${build.dir}/WEB-INF"/>
        </checksum>
        <checksum algorithm="SHA1" fileext=".sha1">
            <fileset dir="${build.dir}/WEB-INF"/>
        </checksum>

        <concat destfile="${checksums.md5.file}">
            <fileset dir="${build.dir}/WEB-INF" includes="**/*.md5"/>
        </concat>
        <concat destfile="${checksums.sha1.file}">
            <fileset dir="${build.dir}/WEB-INF" includes="**/*.sha1"/>
        </concat>

        <delete>
            <fileset dir="${build.dir}/WEB-INF" includes="**/*.md5"/>
            <fileset dir="${build.dir}/WEB-INF" includes="**/*.sha1"/>
        </delete>
    </target>

    <!-- Generate docs -->
    <target name="doc" depends="build, generate-checksums">
        <mkdir dir="${build.dir}/javadoc"/>
    <javadoc destdir="${build.dir}/javadoc"
             sourcepath="${src.dir}/java"
             classpathref="classpath"
             author="true"
             version="true"
             use="true"
             windowtitle="Project API Documentation">
        <doctitle><![CDATA[<h1>Project Documentation</h1>]]></doctitle>
        <bottom><![CDATA[<i>Generated by Apache Ant</i>]]></bottom>
    </javadoc>

        <loadfile property="md5" srcFile="${checksums.md5.file}"/>
        <loadfile property="sha1" srcFile="${checksums.sha1.file}"/>

        <mkdir dir="${build.dir}/META-INF"/>
        <manifest file="${build.dir}/META-INF/MANIFEST.MF" mode="update">
            <attribute name="MD5-Digest" value="${md5}"/>
            <attribute name="SHA1-Digest" value="${sha1}"/>
        </manifest>

        <war destfile="${build.dir}/${ant.project.name}.war" update="true">
            <fileset dir="${build.dir}/javadoc"/>
        </war>
        <echo message="***** DOC GEN COMPLETED *****"/>
    </target>

    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
        <echo message="***** XML VALID COMPLETED *****"/>
    </target>

    <target name="scp" depends="build">
        <scp todir="${scp.host}" port="${scp.port}" password="${scp.password}" trust="true">
            <fileset dir="${build.dir}">
                <include name="**/*.war" />
            </fileset>
        </scp>
    </target>

    <target name="music" depends="build">
        <exec executable="ffmpeg" failonerror="false">
            <arg value="-i"/>
            <arg value="sound.wav"/>
            <arg value="-f"/>
            <arg value="null"/>
            <arg value="-"/>
        </exec>
    </target>




    <target name="history">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="previous.revision" value="HEAD"/>
        <property name="found.working.revision" value="false"/>

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${lib.dir}/ant-contrib.jar"/>
            </classpath>
        </taskdef>

        <foreach list="${previous.revision}" param="revision" target="find-working-revision">
            <param name="revision" value="${previous.revision}"/>
        </foreach>
    </target>

    <target name="find-working-revision">
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision}"/>
        </exec>

        <trycatch>
            <try>
                <antcall target="compile"/>
                <echo>Found working revision: ${revision}</echo>
                <exec executable="git" output="${build.dir}/diff.txt" failonerror="false">
                    <arg value="diff"/>
                    <arg value="${revision}~1"/>
                    <arg value="${current.revision}"/>
                </exec>
                <exec executable="git" failonerror="false">
                    <arg value="checkout"/>
                    <arg value="${current.revision}"/>
                </exec>
                <fail message="Compilation fixed. Please check diff.txt for changes."/>
            </try>
            <catch>
                <echo>Compilation failed on revision: ${revision}. Checking previous revision...</echo>
            </catch>
        </trycatch>
    </target>


















    <target name="build-revision">
        <property name="link" value="${link}"/>

        <exec executable="git" outputproperty="revision">
            <arg value="rev-parse"/>
            <arg value="${link}"/>
        </exec>

        <exec executable="git">
            <arg value="checkout"/>
            <arg value="${revision}"/>
        </exec>

        <antcall target="build"/>

        <copy todir="${team.build.dir}/${revision}">
            <fileset dir="${build.dir}" includes="*.jar"/>
            <fileset dir="${build.dir}" includes="*.war"/>
        </copy>
    </target>
</project>